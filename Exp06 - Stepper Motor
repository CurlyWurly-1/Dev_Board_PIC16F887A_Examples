/********************************************************************************************
* PIC16F877A 
* Stepper Motor driver - with a frequency of 100Hz (10 ms)
* Unfortunately, pin RE0 on the Sintech board also powers the Bell continously 
* (so stick some blu-tack over it to muffle it for the time being!!) 
*
* Inside the motor there are two center tapped coils. 
* The Red wire is common to both coils and it should be connected at VCC or 5V.
* The other 4 wires (pink, red, yellow and blue) will control the rotation and this
* depends on the combination of electrical signals placed to the 4 wires. 
*
* Depending on the movement required, this motor can be controlled using 3 modes:
*
* Full Drive: 
* If two stator electromagnets are energized at a time, the motor will run at full torque referred as full-drive sequence mode.
* Step	Blue	Pink	Yellow	Orange	Number
* 1	1	1	0	0	12
* 2	0	1	1	0	 8
* 3	0	0	1	1        3
* 4	1	0	0	1        9
* 
* Half-Drive: 
* When alternatively one and two phases are energized, the motor will run in half drive mode. 
* It’s used to increase the angular resolution. Drawback is less torque produced in this movement.
* Step	Blue	Pink	Yellow	Orange	Number
* 1	1	0	0	0	 8
* 2	1	1	0	0	12
* 3	0	1	0	0	 4
* 4	0	1	1	0	 6
* 5	0	0	1	0 	 2
* 6	0	0	1	1 	 3
* 7	0	0	0	1	 1
* 8	1	0	0	1	 9
*
* Wave Drive: 
* In this mode, one stator electromagnet is turned on. 
* Its follows 4 steps same as Full-drive mode but it consumes low power with low torque.
* Step	Blue	Pink	Yellow	Orange	Number
* 1	1	0	0	0	8
* 2	0	1	0	0	4
* 3	0	0	1	0	2
* 4	0	0	0	1	1
*
********************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <xc.h>

#pragma config FOSC  = XT       // Oscillator Selection bits (XT oscillator)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP   = OFF      // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD   = OFF      // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT   = OFF      // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP    = OFF      // Flash Program Memory Code Protection bit (Code protection off)

// Unless specified elsewhere, 4MHz system frequency is assumed
#ifndef _XTAL_FREQ
 #define _XTAL_FREQ 4000000
#endif
      


/****************************************************************************
* main()
****************************************************************************/
void main (void)
{
            
	TRISC=0x00;
	TRISE=0x00;

    RE0=1;    // Supply 5V Power through ULN2003A 

    while(1)
    {          
// 0111
        PORTC=0XF7;         
        __delay_ms(10);
// 1011
        PORTC=0XFB;        
        __delay_ms(10);
// 1101       
        PORTC=0XFD;         
        __delay_ms(10);
// 1110
        PORTC=0XFE;         
        __delay_ms(10);
    }
}

