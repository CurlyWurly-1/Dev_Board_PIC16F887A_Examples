/****************************************************************************************
* Analogue to Digital
****************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <xc.h>
#pragma config FOSC = XT        // Oscillator Selection bits (XT oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

const unsigned char TABLE[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
#define AN0 CHS0=CHS1=CHS2=0;

void adc_on();
void adc_off();
void DELAY();                                   //delay
void DELAY1();
void init();                                    //
void seven_seg_display(int x);                  //
void adc_init();                                //adc

unsigned int ad_0();                            //adc

 #ifndef _XTAL_FREQ
 // Unless specified elsewhere, 4MHz system frequency is assumed
 #define _XTAL_FREQ 4000000
 #endif


/****************************************************************************
* main
****************************************************************************/
void main()
{
        int result  = 0x00;          		//
        int resulta  = 0x00;          		//
        
        int cnt;
        int i;
        init();  				//
        adc_init();
        result = 0x00;
        while (1)                  		//
        {
            for (cnt=900;cnt--;)               //
            {                                   //
                resulta = 0x00;              	//
                resulta = ad_0();
  
                // Low pass filter - nice way to smooth things
                result  = result + (0.15 * (resulta - result ));
                seven_seg_display(result);      // Send to Display
            }
        }
}

/****************************************************************************
* init
****************************************************************************/
void init()
{
	TRISA  = 0X00;                          //
	TRISE  = 0X02;                          //
	TRISD  = 0X00;                          //
	ADCON1 = 0XB0;                          //
	ADCON0 = 0X71;                          //
	DELAY();                                //
	PORTA  = 0x00;                          //
	PORTD  = 0x00;
}

/****************************************************************************
* adc_init
****************************************************************************/
void adc_init()
{
	ADCON1=0X80;                            //
	ADCS1 = 1;                              //FOSC/32
	ADCS0 = 0;
	ADON  = 1;
	DELAY();                                //
}

/****************************************************************************
* display
****************************************************************************/
void seven_seg_display(int x)
{
    int thousands;
	int hundreds; 
    int tens;
    int ones;
    int temp;                              //
    
	temp      = x;                         //
	thousands = temp/1000;                 // Div by 1000  
	hundreds  = (temp % 1000) / 100;       // (modulus from 1000) div     100 
	tens      = (temp % 0x64) / 0xa;       // (modulus from 100)  div      10 
	ones      = (temp % 0x64) % 0xa;       // (modulus from 100)  modulus  10

// Thousands    
    if(thousands > 0x09){
		PORTD = ~0x71;                     //
	}else{
        if (thousands > 0x00) {
            PORTD = ~TABLE[thousands];     //
            PORTA = ~0x08;                 // N.B. ~ is a "compliment" operator
            DELAY1();                      //
        };
    };    
// Hundreds    
    if ((hundreds>0) || (thousands>0)){
        PORTD = ~TABLE[hundreds];              //
        PORTA = ~0x04;                         //
        DELAY1();                              //
    };
// Tens
    if ((tens>0) || (hundreds>0) || (thousands>0)){
        PORTD = ~TABLE[tens];                  //
        PORTA = ~0x02;                         //
        DELAY1();                              //
    };
// Units
	PORTD = ~TABLE[ones];                  //
	PORTA = ~0x01;                         //
	DELAY1();                              //

    PORTA = 0xff;                          // Switch off
}

/****************************************************************************
* ad_0()
****************************************************************************/
unsigned int ad_0()
{
	unsigned int res;
	adc_on();
	CHS0 = 0;
    CHS1 = 1;
    CHS2 = 1;
	DELAY1();                               //
	GO = 1;                                 //
    while (GO);                                 //
	res = ADRESH&0x03;
	res = res<<8|ADRESL;
	adc_off();
	return res ;                            //
}

/****************************************************************************
* DELAY()
****************************************************************************/
void DELAY()                                    //
{
	int i;                                  //
	for (i =10000;i--;);                    //
}

/****************************************************************************
* adc_off()
****************************************************************************/
void adc_off()
{
	ADCON1 = 0X86;                          //1000_0110
	ADON   = 0;
}

/****************************************************************************
* adc_on()
****************************************************************************/
void adc_on()
{
	ADCON1 = 0X80;                          //1000_0000
	ADON   = 1;
}

/****************************************************************************
* DELAY1()
****************************************************************************/
void DELAY1()                                   //
{
	int i;                                  //
	for (i =100;i--;);                      //
}

